#!/bin/bash
### --------------------------------- ###
###     Copyright 2016 Luke Higgs     ###
### Contact: admin@aquariandesign.com ###
### --------------------------------- ###

# This file is part of SBU (Snapshot Backup Utility)

# SBU is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.

# SBU is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with SBU (located in /opt/sbu/docs/COPYING).  If not, see <http://www.gnu.org/licenses/>.
#################################################################################################

source /opt/sbu/source/functions

# Initialize variables:
REMOVE=0; CLEAN=0; STOP=0; START=0; RESTART=0; FORCE=0; NEWJOB=0; SETPERMS="copy"; SETGROUP="copy"; SETOWNER="copy"; NOPERMS=0

# First get all input from sbu:

while [ "$1" != "" ]; do
    case $1 in
		--status )   			shift
                                STATUS=1
								NAME=$1
                                ;;
		-f | --force )   		shift
                                FORCE=1
                                ;;
		--autostart )     		shift
                                AUTOSTART=$1
                                ;;
		--full-sync )     		shift
                                FULLSYNC=$1
                                ;;
		-n | --name )     		shift
                                NAME=$1
                                ;;
	    --stop )     			shift
                                STOP=1
								NAME=$1
                                ;;
		--start )     			shift
                                START=1
								NAME=$1
                                ;;
		--restart )     		shift
                                RESTART=1
								NAME=$1
                                ;;
        --remove )     			shift
                                REMOVE=1
								NAME=$1
                                ;;
		--clean )     			shift
								CLEAN=1
								NAME=$1
                                ;;
		--reinit )				shift
								REINITIALIZE=1
								NAME=$1
								;;
		--version )				shift
								VERSION=1
								;;
		-s | --source )         shift
                                SOURCE=$1
                                ;;
        -d | --dest )    		shift
								DEST=$1
                                ;;
        -i | --interval )       shift
								INTERVAL=$1
								;;
		--set-interval )   		shift
								SETINTERVAL=1
								NEWINTERVAL=$1
								;;
		--set-retention )   	shift
								SETRETENTION=1
								NEWRETENTION=$1
								;;
		--show-config )		   	shift
								SHOWCONFIG=1
								NAME=$1
								;;
		-c | --create )			shift
								NAME=$1
								NEWJOB=1
								;;
		-r | --retention )		shift
								RETENTION=$1
								;;
		--no-perms )			shift
								NOPERMS=1
								;;
		--set-perms )			shift
								SETPERMS=$1
								;;
		--set-owner )			shift
								SETOWNER=$1
								;;
		--set-group )			shift
								SETGROUP=$1
								;;
		-h | --help )			shift
								usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

if [[ $VERSION -eq 1 ]]; then
	echo $(tail /opt/sbu/docs/version)
fi

if [[ $SHOWCONFIG -eq 1 ]]; then
	if [ -z "$NAME" ]; then
		echo "ERROR: Can't show configuration, please enter a job name." 
	else
		# Show config:
		clear
		echo "-----$NAME Config-----"
		echo ""
		while read -r line
		do	
			if [[ $line == *"Source="* ]]; then
				echo "Source "$(echo "$line" | cut -d '=' -f 2)
				echo ""
			fi
			if [[ $line == *"Dest="* ]]; then
				echo "Destination "$(echo "$line" | cut -d '=' -f 2)
				echo ""
			fi
			if [[ $line == *"Interval="* ]]; then
				echo "Interval "$(echo "$line" | cut -d '=' -f 2)
				echo ""
			fi
			if [[ $line == *"Retention="* ]]; then
				echo "Retention "$(echo "$line" | cut -d '=' -f 2)
				echo ""
			fi
			if [[ $line == *"Autostart="* ]]; then
				echo "Autostart "$(echo "$line" | cut -d '=' -f 2)
				echo ""
			fi
			if [[ $line == *"FullSync="* ]]; then
				echo "Full Sync "$(echo "$line" | cut -d '=' -f 2)
				echo ""
			fi
			if [[ $line == *"DestPerms="* ]]; then
				echo "Destination Permissions "$(echo "$line" | cut -d '=' -f 2)
				echo ""
			fi
			if [[ $line == *"DestOwner="* ]]; then
				echo "Destination Owner "$(echo "$line" | cut -d '=' -f 2)
				echo ""
			fi
			if [[ $line == *"DestGroup="* ]]; then
				echo "Destination Group "$(echo "$line" | cut -d '=' -f 2)
				echo ""
			fi
		done < "/opt/sbu/jobs/$NAME/$NAME.conf"
	fi
fi

# Check for single functions like delete, stop, start, etc:
if [[ $STATUS -eq 1 ]]; then
	/opt/sbu/source/get-status.sh $NAME
fi

if [[ $CLEAN -eq 1 ]]; then
	
	if [ -z "$NAME" ]; then
		echo "ERROR: Can't clean job, please enter a job name." 
	else
		/opt/sbu/source/clean-job.sh $NAME
	fi

fi

if [[ $REMOVE -eq 1 ]]; then
	if [ -z "$NAME" ]; then
		echo "ERROR: Can't remove job, please enter a job name."
		exit
	fi
	if [ -d "/opt/sbu/jobs/$NAME" ]; then
		if [[ $FORCE -eq 1 ]]; then
			DELETEFILES=1
			/opt/sbu/source/remove-job.sh $NAME $DELETEFILES
			exit
		fi
		echo "Preparing to remove $NAME...delete all backup files?"; read deleteFiles
		if [[ $deleteFiles == "y" ]]; then
			echo "Are you sure? All your file backups will be deleted! This may take a while!"; read deleteFilesConfirm
			if [[ $deleteFilesConfirm == "y" ]]; then
				DELETEFILES=1
			else
				DELETEFILES=0
			fi
		else
			DELETEFILES=0
		fi
		/opt/sbu/source/remove-job.sh $NAME $DELETEFILES
		exit
	else
		echo "$NAME job does not exist!"
		exit
	fi
fi

if [[ $REINITIALIZE -eq 1 ]]; then
	if [ -d "/opt/sbu/jobs/$NAME" ]; then
		echo "WARNING: This will delete all backup files for $NAME! Are you sure?"; read reInit
		if [[ $reInit == "y" ]]; then
			/opt/sbu/source/reinitialize-job.sh $NAME
			/opt/sbu/sbu --status $NAME
		else
			exit
		fi
	else
		echo "$NAME job does not exist!"
	fi
fi

if [[ $STOP -eq 1 ]]; then
	if [ -z "$NAME" ]; then
		echo "ERROR: Can't stop job, please enter a job name."
		exit
	fi
	/opt/sbu/source/stop-job.sh $NAME
	exit
fi

if [[ $RESTART -eq 1 ]]; then
	if [ -z "$NAME" ]; then
		echo "ERROR: Can't restart job, please enter a job name."
		exit
	fi
	if [ -d "/opt/sbu/jobs/$NAME" ]; then
		/opt/sbu/sbu --stop $NAME
		/opt/sbu/sbu --start $NAME
	else
		echo "$NAME job does not exist!"
	fi
fi

if [[ $START -eq 1 ]]; then
	if [ -z "$NAME" ]; then
		echo "ERROR: Can't resume job, please enter a job name."
		exit
	fi
	
	PID=$(pgrep -f "/opt/sbu/source/run-job.sh $NAME")
	if [[ "$PID" > 0 ]]; then
		echo "$NAME already running..."
		exit
	else
		nohup /opt/sbu/source/run-job.sh $NAME &>/dev/null &
	fi
	
	if [[ $(checkStatus $NAME) -gt 0 ]]; then
		echo "$NAME started"
	else
		if [ -d "/opt/sbu/jobs/$NAME" ]; then
			echo "$NAME could not be started, please check the log."
		else
			echo "$NAME could not be started, job does not exist!"
		fi
	fi
	exit
fi

if [[ $SETRETENTION -eq 1 ]]; then
	if [ -z "$NAME" ]; then
		echo "ERROR: Cannot set retention policy, please enter a job name."
		exit
	else
		if [ -d "/opt/sbu/jobs/$NAME" ]; then
			echo "Setting retention to $NEWRETENTION"
			while read -r line
			do
				if [[ $line == *"Retention"* ]]; then
					OLDRETENTION=$(echo "$line" | cut -d '=' -f 2)
				fi
			done < "/opt/sbu/jobs/$NAME/$NAME.conf"
			sed -i -e 's/Retention='$OLDRETENTION'/Retention='$NEWRETENTION'/g' /opt/sbu/jobs/$NAME/$NAME.conf
			exit
		else
			echo "$NAME job does not exist!"
		fi
	fi
fi

if [[ $SETINTERVAL -eq 1 ]]; then
	if [ -z "$NAME" ]; then
		echo "ERROR: Cannot set interval, please enter a job name."
		exit
	else
		if [ -d "/opt/sbu/jobs/$NAME" ]; then
			echo "Setting interval to $NEWINTERVAL"
			while read -r line
			do
				if [[ $line == *"Interval"* ]]; then
					OLDINTERVAL=$(echo "$line" | cut -d '=' -f 2)
				fi
			done < "/opt/sbu/jobs/$NAME/$NAME.conf"
			sed -i -e 's/Interval='$OLDINTERVAL'/Interval='$NEWINTERVAL'/g' /opt/sbu/jobs/$NAME/$NAME.conf
			exit
		else
			echo "$NAME job does not exist!"
		fi
	fi
fi

if [ "$AUTOSTART" == "on" ]; then
	if [ -z "$NAME" ]; then
		echo "ERROR: Cannot set autostart, please enter a job name."
		exit
	else
		if [ -d "/opt/sbu/jobs/$NAME" ]; then
			echo "Setting $NAME autostart to on."
			sed -i -e 's/Autostart=off/Autostart=on/g' /opt/sbu/jobs/$NAME/$NAME.conf
			grep -v "/opt/sbu/sbu --start $NAME" /opt/sbu/source/autostart.sh > /opt/sbu/source/autostart.tmp; mv /opt/sbu/source/autostart.tmp /opt/sbu/source/autostart.sh
			echo "/opt/sbu/sbu --start $NAME" >> /opt/sbu/source/autostart.sh
			chmod a+x /opt/sbu/source/*
			exit
		else
			echo "$NAME job does not exist!"
		fi
	fi
fi

if [ "$AUTOSTART" == "off" ]; then
	if [ -z "$NAME" ]; then
		echo "ERROR: Cannot set autostart, please enter a job name."
		exit
	else
		if [ -d "/opt/sbu/jobs/$NAME" ]; then
			echo "Setting $NAME autostart to off."
			sed -i -e 's/Autostart=on/Autostart=off/g' /opt/sbu/jobs/$NAME/$NAME.conf
			grep -v "/opt/sbu/sbu --start $NAME" /opt/sbu/source/autostart.sh > /opt/sbu/source/autostart.tmp; mv /opt/sbu/source/autostart.tmp /opt/sbu/source/autostart.sh
			chmod a+x /opt/sbu/source/*
			exit
		else
			echo "$NAME job does not exist!"
		fi
	fi
fi

if [ "$FULLSYNC" == "on" ]; then
	if [ -z "$NAME" ]; then
		echo "ERROR: Cannot set full sync, please enter a job name."
		exit
	else
		if [ -d "/opt/sbu/jobs/$NAME" ]; then
			echo "Full sync set to on. $NAME will now do a full sync on each snapshot."
			sed -i -e 's/FullSync=off/FullSync=on/g' /opt/sbu/jobs/$NAME/$NAME.conf
			exit
		else
			echo "$NAME job does not exist!"
		fi
	fi
fi

if [ "$FULLSYNC" == "off" ]; then
	if [ -z "$NAME" ]; then
		echo "ERROR: Cannot set full sync, please enter a job name."
		exit
	else
		if [ -d "/opt/sbu/jobs/$NAME" ]; then
			echo "Full sync set to off. $NAME will only do a full sync at midnight."
			sed -i -e 's/FullSync=on/FullSync=off/g' /opt/sbu/jobs/$NAME/$NAME.conf
			exit
		else
			echo "$NAME job does not exist!"
		fi
	fi
fi

# After check for single functions check for new job flag and check syntax:

if [[ $NEWJOB -eq 1 ]]; then

	echo "------------CREATING NEW JOB------------"

	if [ -z "$SOURCE" ]; then
	echo "ERROR: No source directory selected!"
	echo "Usage Example: sbu --name my-backup --source /my/source/dir --dest /my/backup/dest/ --interval 30 --days-to-keep 30"
	exit
	fi

	if [ -z "$DEST" ]; then
	echo "ERROR: No destination directory selected!"
	echo "Usage Example: sbu --name my-backup --source /my/source/dir --dest /my/backup/dest/ --interval 30 --days-to-keep 30"
	exit
	fi

	if [ -z "$NAME" ]; then
	echo "ERROR: Please enter a backup name!"
	echo "Usage Example: sbu --name my-backup --source /my/source/dir --dest /my/backup/dest/ --interval 30 --days-to-keep 30"
	exit
	fi
	
	if [[ $NOPERMS -eq 1 ]]; then
		SETPERMS="no-perms"
		SETOWNER="no-perms"
		SETGROUP="no-perms"
	fi
	
	nohup /opt/sbu/source/create-new-job.sh "${SOURCE}" "${DEST}" $NAME $INTERVAL $RETENTION on $SETPERMS $SETOWNER $SETGROUP &>/dev/null &
	sleep 1
	
	if [ -s "/var/log/sbu/$NAME-job-creation-error" ]; then
		echo $(cat /var/log/sbu/$NAME-job-creation-error)
		rm -rf /var/log/sbu/$NAME-job-creation-error
		/opt/sbu/source/clean-job.sh $NAME
		exit
	else
		echo "$NAME has been initialized. Run \"sbu --status $NAME\" to view it's status."
	fi
	
fi
